REMINDER:  on startup:
    dropdb, createdb, seed.py, source secrets.sh, source env/bin/activate

***********
***TO DO***
***********

    better date/time picker

    improve demo map:
        Make Pop up notice when user arrives not stop the animation?
        Remove ETA from legend when user arrives?
        pop up to user1 when user2 arrives at destination
         User3 joins the rendezvous and route appears on the map
        fix the zoom:
            Do some calculation of the starting points of the routes and the destination
            point and adjust the zoom and center point of the map to include all of
            all routes
        can i animate the "traffic encountered" delay from googlemaps
        pop up to user1 when user2 arrives at destination
            (and remove their route)
        add comments from the user "stopped to get gas"

Sent Invitation success:  make link go to "Sent Invitations" tab!
    improvement:  look up jQuery on-click to close the modal, go to page and switch to tab

Invitation change status:  can i capture the flash in bootstrap and make it cooler?

Next most important:  could I get google maps routes API thingy working bettween
    "Click to Go" and displaying the routes?

Sent invitations:  add un-cancel button and re-invite friends.

It would be good to refactor how I'm sending invite query data to user's page:
    if i sent a dictionary, then understanding and changing the jinja references
    to data bits would be easier (could be invite.name or invite['name']
    - i forget which - instead of invite[i])

Rendezvous Map Improvements:
    **Do this stuff on v1 map for demo**
    Hover over dots show name & current ETA.
    Make demo animation slower, have user2 arrive first, then send alert when user2 arrives at destination
    Add on-click listener to launch modal when click on ANY googlmap marker

Question about testing: had to manually create "testdb".  Other ways?

Add even more tests so I don't have to manually check if changes broke stuff.
    confirm test that you can't get to users/id by brute force (try get and post)
    And, should users/user_id be accessed only by one or the other?

Improve layout of User landing page (tabs!?)
    https://www.w3schools.com/bootstrap/bootstrap_tabs_pills.asp

Make Time-To-Rendezvous page:
    Change User Profile page so clicking on Active Invitation brings you to
        intermediate page where you select your route (choose starting point using
        google maps autofill?  or even simpler for now just fake starting point?)
        Then send GET to Google maps and capture that route data to Waypoints.
        THEN display the v3 rendezvous map and add code to check db for new users
        who are on this invitation joining this rendezvous, and display their
        routes when they join.  Think:  might have to modify model for this...?
        Here's the google maps API for getting the directions:
            https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete-directions

Improve Login
    Add some javascript to check for valid data w/out reloading page
    Do same for Registration form

On User.html, inspect element reveals the user_id and invite_id values. Is there any way to hide that data and still pass it in the Post request?  Maybe can I save the invite ID to session when the button is clicked and then get it from there in the map route???

Refactor Waypoints and Invitations table/class
    why not store route lat/long data in one field formatted for google maps Path?
    there is no reason to store them in individual fields! Would make loading the
    routes on the rendezvous map go much faster.

Improve Invitation form
     Look into using "remote" option and loading the modal from a different HTML page http://getbootstrap.com/2.3.2/javascript.html#modals

Add indexes in model.py on fields that are FK's

Need to add more seed data to be able to test if these things work
Finish User landing page for after login
    Shows "active" Invitations
    Shows "pending" Invitations
    Shows "pending" friend requests
    Need routes for each of those users on the invites

Web page design security question:
    /users/<userid>
    reveals user id's...  seems bad.  probably should pass from session data
        instead.
    POST *and* check when land that sessionID = userID

Obtain geolocation info and update animation of routes & status info in real time
    start here?  https://developers.google.com/maps/documentation/javascript/examples/map-geolocation
    ASK KRISTINE - she used html5_geolocator (or something like that) with google map

Add tests!

Need to test new SQLAlchemy relationships to make sure they're doing what I
    think they're doing:
    (HOW: python -i model.py. u# = User.query.get(user #), then play from there)
    all_relationships
    usr (backref on relationships, should show users data for user_id)
    friend (backref on relationships, should show users data for friend_id)
Design queries that will be used by app (don't forget to use SQLAlchemy relationships)
    Select invitations that are dated in the future
    Select past invitations (last 5 days, last 30 days)
    Select pending friend requests
    Select list of Active friends
    Select list of Inactive friends
    Select list of Rejected friend requests
    Test those queries
Add tests

Add a header w/menu items on Rendezvous Map page
    Go to homepage
    Supress/Display other's routes
    Cancel this Rendezvous (send notice to others)

Make Manage Friends routes & pages
    Scenario that should be tested:  what if two people ask each other (two pendings)
    1) Form to ask somebody (by email address) to be your friend
        If email exists:
            If previously rejected by this person, do not allow request to continue
            Else:
                create record in relationships (user1 as user_id, user2 as friend_id,
                status as 'pending')
        Else: at this time, say "does not exist"
            later: offer form to email your friend link to join Rendezvous
    2) Page to see your "pending" friend requests & respond to them
        user1 asks user2:
            if rejected, mark status as "rejected"
            if accepted, mark status as "active" and create a second row with user2 as user_id, user1 as friend_id, status as 'active')
                This is slightly non-normalied, but WAY easier to query things!
    3)Make app_route & page for managing existing "active" relationships
        mark both users as "inactive" if either user revokes friendship
    4)Make app_route & page for managing "inactive" relationships
        allow user to re-initiate relationship (sends new friend request?)
    5)Make app_route for managing requests you have rejected
        allow user to remove the rejected record so that person can successfully
        request friendship again

Add email authentication to new users...  that would be a whole big thing
    requiring SMTP and don't know what else.

Add tests
How can I supress the link to Homepage from the homepage, but have it everywhere else?

Make Invitation management route & page
    Accept or Decline invitation(s)
    Modify invitation (by user who created it)
    Propose alternatives (by invited users)
    Includes "Go" button which (idealy):
        opens Google Maps w/destination from Invitation populated
        prompts you with suggested routes
        lets you choose a route
        makes your chosen route information available to other user(2) on invitation
    Includes a "Stop" button which turns off route sharing
Expire Invitations when all users have arrived at destination
Email Invitation announcement to invited users
Email reminders of Rendezvous at set intervals
    Make Settings route & page for user to manage settings
        email notification of Invitation
        reminder frequency
Handle timezone differences between users
Forgot User Name & Forgot Password stuff

Way Future Features:
    For Rendezvous happening in x-minutes, when setting up invitation show other mutual friends that are nearby to prompt you to invite them (given permission from users to "share location for invites") ?? Can this even be done?? query geolocation of someone not logged in? probably not?
    Be able to put in date/time of rendezvous and your departure location & method of travel and friend's likely departure location & method of travel & have it suggest places that are halfway between you not as the crow flies, but by how long it's going to take each of you to arrive.


***********
***DONE***
***********

Pop-up on user arrival with user's name.
ETA on legend (can i fake updates? maybe use offset value?)

Animation successfully uses nesUserLines with refactored data structure.
Refactored rendezvousmap code to save line, user name, eta data, symbol color
    all in one object

Added ETA data to the json being returned to map.
Added starting ETA text and value to model and seed.py
Change invite status - need confirmation message. Used flash for now.
Sent Invitation success:  link your invitations
New Invitation Modal:  make Rendezvous name cursor focus (autofocus)
^6/1^

Improved layout of Sent Invites and added Cancel button (it's not really
    fully functional without an un-cancel button, but out of time.)
Made some progress grouping Sent Invite by invite and displaying each friend's
    response under the invites.
Added removal of the route polyline upon "arrival" of the dot at destination.
Changed canned route data.
Animation working.  Took hours - there were several issues, biggest one was that
    i was making a separate dot at beginning of the line with every loop through
    waypoints, and only one of them was accessible to animate.  Moved where the
    symbols were added from within waypoints loop out to users loop.
    Got differeing speed working too - that was due to re-setting the speed
    variable back to default with each loop. moved initial definition out of the loop.
Map resizes and re-centers automatically when window is resized (still trying to
    figure out how to dynamically change zoom)
Legend working.
Googlemap:  removed map/satelite option.  removed street view.
Animation progress:  dots now move, but thousands of errors and original dots
    stay at starting point.
Names and colors on legend now working.
^5/31^

Legend on map, but names and colors are wrong.
Buttons to change invite status now work.
Re-factored queries and now have Sent Invitations (lists status for each user on
    invitation you sent) and Received Invitations (lists deets and current status
    and has button to change status)
Added data to seed.py to be able to test invitation statuses
^5/30^

Modified query to get list of today's invites correctly to show on front of user profile.
    need to copy how i did that for Received Invites and Sent Invites (see notebook).
    (Took almost an hour to figure out how to get current datetime in local timezone - very frustrating!)
Added rendezvousLocationName and Address to save in db with new invitation to
    make it easier to disply the name & address in pending invitation management
    Added data to seed.py for new fields.
Spent an hour troubleshooting broken maps due to changes I had made to base.html,
    then another 20 minutes undoing the changes made by the person who helped me
    with troubleshooting and restoring original base.html.  Will revisit those
    changes later given time.
Got date, time and full name on button (active invitations)
^5/29^

Added bootstrap tabs to my user landing page.
These errors stopped occurring on their own:
    Fix bug on /users :  1:43 Uncaught ReferenceError: user is not defined
    at 1:43
    AttributeError: 'User' object has no attribute 'act_friends'
Finished refactoring waypoint data/code.  Javascript is 70+ lines shorter and much
    easier to understand.
^5/28^

Starting trying to refactor code to improve waypoint data format.  Got the server-side
    of the work done, but refactored javascript not working - no errors, just route
    lines do not show up on map.
^5/27^

Added legend to my dynamic map, but need user name.
Added a legend to my demo map.
Added SQLAlchemy relationships for active, pending, rejected relationships
Added SQLAlchemy relationships for active, pending, rejected invitations
Also clears google map search box on hidden of the modal (either successful submission of invite or from closing it)
Got modal form data cleared when it is hidden (.on('hidden.bs.modal')
Learned how to manipulate unicode list into an actual list (import ast then ast.literal_eval()), and now invitation records are correctly created!
Added lat/lng of the destination to the jquery reqest to create invitation
^5/25^

Save the data on the form to the database
    (don't forget to user session['user_id'] as created_by_id)
With so much help from Ahmed, got json data from modal form into my route in usable formats
Populate the Location from the marker data
Invitation modal form:  Checkboxes to choose Friends to invite
    required new SQLAlchemy relationship to get active friends
^5/24^

Generate Flask secret key from random, save it in secrets file (and put that file in .gitignore)
Fixed git merge issues successfully.
Got Date/time of Rendezvous field on Invitation form
Made new Flask App secret key and saved it to secrets.sh
Fixed the modal invitation form issue by getting code from current version of bootstrap.
Changed model.py and seed.py and example_data() to include a name for the invitation.
Got (with Agne's help - not working perfectly for some reason) modal pop up to
    create invitation when you click on location marker.
Got search working.  got onclick to capture lat/long.
Worked on google maps places search for invitation creation.
Got new google maps API key, put it in secrets, changed server.py and map pages
    to use key from secrets.
^5/23^

Added more tests.
In /users app route, confirms session user ID matches route user id else redirects to / with "you must be logged in" flash.
Spent 2 HOURS with Leslie troubleshooting test /login error ("popped wrong
    request context") and then finally fixed it!
Help from Agne, fixed hash passwords/testing conflict
Learned again that circular imports do not work.
^5/22^

Fixed test_rendezvous_map_route (needs to be a POST)
Added more tests so I don't have to manually check if changes broke stuff.
^5/21^

Finished moving javascript for map to js file.
^5/20^

made map more dynamic changing viewport:
    content="initial-scale=1.0, user-scalable=no"> to
    content="width=device-width, initial-scale=1.0, user-scalable=yes">
Did file cleanup (moving data to folder, moving documentation to folder, 
    git rm files i'd deleted but ignored)
Added bcrypt install to pip requirements.txt
Added password hashing using bcrypt.
Got cursor focus to be in the login box when page opens
^5/19^

Tried to move rendezvous map JS to separate file, and broke it.
Got better route data for users and put it in seed.py
Modifed model.py to remove created date from waypoints - Not going to use that
    fake field.  moving the icon will have to come from a different table, and
    they will always be inserted in order, so can use waypoints_id to sort them.
Added more data to seed.py
Noticed that my route info in seed data was wrong - not starting at start points
    Fixed and created helper function to get formatted route data from two addresses to populate seed data.
Color code "my" route vs "other" route:
    Modify to handle multiple "other" routes - user javaScript object
Answered:  IMPORTANT QUESTION:  if dictionaries do not maintain order, are the waypoints going to be in the right order?  I am passing the waypoints as a list within the dict, so they will stay ordered.
^5/18^

Cleaned up code so javaScript uses camelCase.
Progress made:  ONE of the other user's routes shows up on the map! (was broken
    not because of anything wrong with the for loop design, but because of bad
    syntax of one of the lines within the loop)
Learned:  when trying to insert data in a list in a dictionary using .setdefault(key, {}),
    if you use .append, it will make a list inside the list, but .extend will
    make just one list.
Learned that my waypointsByUser json object is poorly designed for what I'm
    trying to do with it.  Going back to drawing board for how that data should
    be passed.
Added lots of code to try and get users routes & symbols to display.  At some point
    got error "gogle is not defined".  Fixed this by removing "async defer" from the 
    <script></script> statement that loads googleapis.  Now map and logged in
    user's route shows, but users still not, and logged-in user's symbol is at
    destination rather than beginning of route. Fixed symbol by changing Offset
    value in selfLine definition to 0% instead of 100%.
^5/17^

Got SELF's data to parse correctly and show the polyline!
Changed format of json being passed to break data into two objects:
    waypoints_for_self
    waypoints_for_others
    so can iterate over the "others" one to draw their routes
Succeeded in getting waypoint data by user_id in json returned to map page!
struggled all day with getting data for multiple routes:
    struggled with the ajax
    struggled with querying the data and getting it into a format I can json
^5/16^

Got user page to got to map with POST request containing user_id and invite_id,
    and it displays the centerpoint w/marker from the invitation chosen on user page.
Code review with Leslie:
    consolidated into one animation function
    took out "% 200" from "count = (count + 1)" on animation - appeared to be leftover
        from having the animation restart and loop
Added marker on destination point
Color codee "my" route vs "other" route:
        Made "my" route (line: '#8A2BE2', symbol:'#000000')
        Made single other route grey with different color symbol
^5/15^

Changed map type to roadmap.
Re-organized To Do list.
Fixed whatever I had broken on user landing page Friday.
Import requests - gets error. Fixed by adding pip install requests to requirements.txt
^5/14^

Added link on Base to get to your user profile page if you are logged in
Created user profile landing page, but realized I had to add status to invites
    as well as add more seed data to be able to test what is displayed
Realized belatedly that UsersInvites needs to have status so friends can accept
    or reject your invitation.
active_relationships SQL Alchemy relationship works as desired
Do not display password when typing (thank you, Aaron)
^5/12^

Added SQLAlchemy relationships:  all_relationships and active_relationships to model.py
Added relationship test data to seed.py
Created relationships table
Created relationship_status (pending, rejected, active, inactive)
Added created_by_id and created_date to invitations
Tested Registration (allow only unique emails)
    Ran into "duplicate key value violates unique contraint" when manually adding users after seeding database,
        Fixed:  modifed seed.py to update seq_id for all tables with serialized keys
Tested Login
Created tests.py, made some tests of current routes
^5/11^

Modified model.py and seed.py to add email address of users
Make registration route & page
Make login process route
Make Login route and page
Modified animation so route1 and route2 go at different speeds
Modified animation so route1 and route2 start at different times
Animate second route
Display user2's route on the map
^5/10^

Animate traveling along the route
Display user1's route on the map
Make web page that displays a map
Build seed.py
Start server.py
Build model.py
