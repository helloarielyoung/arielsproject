Links & notes for my project

Fancy Map styles in Google Maps API
  https://snazzymaps.com/

Fancy Google Maps marker customization:
  https://pepsized.com/customize-your-google-map-markers/

Fancy IF in javascript:
      strokeColor: (login == user_id) ? '#393' : symbolcolors[i]

      where "i" was the i in a for loop... but it could be something else

Things that were not working for AJAX call to get invitation waypoints data:
        
        Attempt #1:
        success: function(data) {
          // do stuf with the query data that is returned
            alert="ajax call did something!"
          },
          error: function(xhr) {
          alert="there was an error retrieving waypoint data!"
          }
        });

        function DecideWhichUser(user_id, invite_id, queries) {
          
        }

        Attempt #2 (I think the $.post stuff is right, but not sure how to actually
            use this)  ARG!:
        function() {
          $.post('/map-data.json',
          {
            invite_id = {{ invite_id }}
          },
          function(data, status){
            alert("Data: " + data + "\nStatus: " + status);
          });
        }

        Ideas to try:
            $( window ).on( "load", function() { ... })
            $( document ).ready(function() {}

Color Picker:  https://www.w3schools.com/colors/colors_picker.asp

How to stop the animation when it reaches the end of the line?
    http://stackoverflow.com/questions/16338774/show-a-moving-marker-on-the-map




Things that I did to get Path formatted correctly:
  NOTE:  to draw the polyline of route:
  path = needs to be formated as: 
    [{'lat': 37.748915, 'lng': -122.4181515}, {'lat': 37.7482293, 'lng': -122.4182139}...] 


// what it looks like when you enter it manually (and it works):
 //  path: [{'lat': 37.748915, 'lng': -122.4181515},
 // {'lat': 37.7482293, 'lng': -122.4182139},
 // {'lat': 37.7496136, 'lng': -122.4041771}],

    in server.py:
        user1path = []

        user1query = db.session.query(Waypoint.waypoint_lat,
                                      Waypoint.waypoint_long).filter(Waypoint.user_id == 1,
                                                                    Waypoint.invite_id == 1).all()

        for waypoint in user1query:
            waypoint_dict = {}
            waypoint_dict['lat'] = float(waypoint[0])
            waypoint_dict['lng'] = float(waypoint[1])
            user1path.append(waypoint_dict)
    but when user1path was interpreted by jinja (in {{ user1path }} ) it was putting
        the symbols for the single quotes around lat & lng instead of literal single quotes

    so tried in the HTML:
        tried this:
           // but it was putting code instead of single quote round 'lat'
          path: {{ user1path }},

        tried this:
         path: [
          {% for waypoint in user1query: %}
            {'lat': waypoint[0], 'lng': waypoint[1]},
          {% endfor %}
          ],

***Fixed** I was so close.  Fixed by putting jinja {{}} around wayoint[0] and waypoint[1]
      POSSIBLE ALTERNATIVE if this gets funky (since jinja within Javascript can
        go south:  create a separate route that returns json with just the route
        data and pass that back to the javascript as a separate thing.



Google Maps
    API key:  AIzaSyAQebJTWGOQmOsuTYscQ5bjCVjBenHOgC0 

Mapbox
    driving directions
        example: https://www.mapbox.com/mapbox-gl-js/example/mapbox-gl-directions/

        Maybe v4 returns the actual data?
        https://www.mapbox.com/api-documentation/pages/directions-v4.html

    point animation
        example: https://www.mapbox.com/mapbox-gl-js/example/animate-point-along-route/

    turf
        https://www.mapbox.com/help/analysis-with-turf/


        line-distance:
            example: https://www.mapbox.com/mapbox-gl-js/example/measure/
            documentation:  https://github.com/turf-junkyard/turf-line-distance

        turf.along:
            docs:  http://turfjs.org/docs/ and search for "along"

            turf.along looks like it has feature "Center" that I can use in future release to calculate the center point between User1 and User2... and then use Yelp to find a restaurant near that center point...



working with routes data from mapbox
    bash command line:
         curl "https://api.mapbox.com/directions/v5/mapbox/driving/-122.4114, 37.7887;-122.4683, 37.7181?steps=true&alternatives=true&access_token=sk.eyJ1IjoiaGVsbG9hcmllbCIsImEiOiJjajJhbTF2MmEwMDhnMzNvZzhndDZkOG5oIn0.M8t-MQ_OSc_hCGwSDkyjnQ" > directions.json
         (found this here:  https://www.mapbox.com/api-documentation/#directions)

    interactive python:
        f=open('directions.json')
        data = f.read()

        import json
        data = json.loads(data)

        new_data = data['routes'][0]['legs'][0]['steps']

        directions = []

        for step in new_data:
            directions.append(step['intersections'][0]['location'])


    Polyline
        installed polyline:   npm install @mapbox/polyline
        but still did not get polyline to work.

