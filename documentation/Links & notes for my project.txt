****Links & notes for my project****

Dates & times:  moment.js
  https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xiii-dates-and-times  
  in Python:  .strftime('%m/%d/%Y %I:%M%p')
  in Jinja:  

Bootstrap alert:  timed fade: 
  http://jsfiddle.net/QAz2U/3/
  https://stackoverflow.com/questions/7676356/can-twitter-bootstrap-alerts-fade-in-as-well-as-out  

Datetime picker:  http://www.tikalk.com/incubator/week-picker-using-jquery-ui-datepicker/
    http://trentrichardson.com/examples/timepicker/
    https://cdnjs.com/libraries/jquery-ui-timepicker-addon

Google Maps dynamic zoom
  https://stackoverflow.com/questions/20480813/google-maps-api-v3-dynamic-zoom-level-when-using-places-library
  https://groups.google.com/forum/#!topic/google-maps-js-api-v3/HyAFbvzoGGo
  
Image for background:  https://commons.wikimedia.org/wiki/File%3A1932_Candrain_Map_of_San_Francisco%2C_California_-_Geographicus_-_SanFrancisco-candrian-1932.jpg


For Sent Invitations, example of the jinja grouped data.
  List:
  [(1, u'Girls coffee date', datetime.datetime(2017, 5, 31, 9, 0), u'Test location 1', u'123 Street', 1, datetime.datetime(2017, 5, 9, 9, 0), 2, u'act', u'accepted', u'Test User 2', u'user2@email.com'), (1, u'Girls coffee date', datetime.datetime(2017, 5, 31, 9, 0), u'Test location 1', u'123 Street', 1, datetime.datetime(2017, 5, 9, 9, 0), 3, u'act', u'accepted', u'Test User 3', u'user3@email.com')] 
    Person:
    (1, u'Girls coffee date', datetime.datetime(2017, 5, 31, 9, 0), u'Test location 1', u'123 Street', 1, datetime.datetime(2017, 5, 9, 9, 0), 2, u'act', u'accepted', u'Test User 2', u'user2@email.com') 

Updating invitation status.  If the way I did it does not work, try:
        # bulk update
        # Users_Invites.query.filter_by(User_invites.user_id == user_id,\
        #     User_Invites.invite_id == invite_id).update(status=status)


Google maps controls:  https://developers.google.com/maps/documentation/javascript/controls

Jinja groupby:  http://jinja.pocoo.org/docs/2.9/templates/

Jinja can do conditional for loop!
    {% for invite in received_invites_sum if invite[0] == 'pen' %}

Saved because this worked, but I re-wrote it using SQLAlchemy
        #active invitations that are today
        # and list other active users if it's created by self
        stmt = db.text("SELECT ui.status,\
                               ui.invite_id,\
                               i.rendezvous_name,\
                               i.rendezvous_date,\
                               u.name, \
                               i.rendezvous_location_name,\
                               i.rendezvous_location_address,\
                               u.user_id\
        FROM users_invites ui\
        JOIN invitations i on ui.invite_id = i.invite_id \
        JOIN users u on u.user_id = i.created_by_id \
        WHERE ui.user_id = :user_id and ui.status = 'act'\
              and rendezvous_date between :today and :tomorrow\
        ORDER BY rendezvous_date, rendezvous_name")
        stmt = stmt.columns(UserInvite.status,
                            UserInvite.invite_id,
                            Invitation.rendezvous_name,
                            Invitation.rendezvous_date,
                            User.name,
                            Invitation.rendezvous_location_name,
                            Invitation.rendezvous_location_address,
                            User.user_id)
        active_invitation_data = db.session.query(UserInvite.status, UserInvite.invite_id,\
            Invitation.rendezvous_name, Invitation.rendezvous_date,\
            User.name, Invitation.rendezvous_location_name,\
            Invitation.rendezvous_location_address, User.user_id).\
            from_statement(stmt).params(user_id=session['user_id'],
                                        today=today, tomorrow=tomorrow).all()



db.session.query(from Class or list of columns with one from from class listed first).join:
  use aliased(class name) to be able to join to same table multiple times, and add
  the table from which you are joining (User.addresses) to specify on clause
        
        a_alias = aliased(Address)

        q = session.query(User).\
          join(User.addresses).\
          join(a_alias, User.addresses)

    if don't want any fields from FROM table, or don't want to put them first, force the FROM:
        q = session.query(Address).select_from(User).\
                join(User.addresses)

    to specify the on clause, use this:
        query(User).join((Address, User.id==Address.user_id))

        This calling form is accepted in 0.7 and further, though is not necessary unless multiple join conditions are passed to a single join() call, if only one condition, use:
        
        q = session.query(User).join(Address, User.id==Address.user_id)

    For LEFT OUTER:
        session.query(User).outerjoin(Address) and etc.

Jinja2 conditional for loop that works on data from a query:
        <ul>{% for invite in invitation_data if invite[0] == 'pen' %}
    if trying to do the same thing but using an SQLAlchemy relationship instead of query,
    i think you use attribute instead, for example here is sorting using SQLA
    relationship from model.py called "active_invites"
        {% for invite in user.active_invites|sort(attribute='rendezvous_date') %}
Working on invite lists...  filter using Jinja?
    {% for invite in user.pending_invites|selectattr("rendezvous_date", "equalto", _datetime)|sort(attribute='rendezvous_date') %} or something like that....

    trying textual SQL:  http://docs.sqlalchemy.org/en/latest/orm/tutorial.html#orm-tutorial-literal-sql

Google maps legend:  https://developers.google.com/maps/documentation/javascript/adding-a-legend
    fixed custom legend:  https://stackoverflow.com/questions/36515/fixed-legend-in-google-maps-mashup
    https://developers.google.com/maps/documentation/javascript/controls#CustomControls
Google maps ALL the availble google icons: http://kml4earth.appspot.com/icons.html

Google maps custom symbols:  https://developers.google.com/maps/documentation/javascript/examples/overlay-symbol-custom


Working with unicode:
  omg, cleanest way to convert from unicode:
  import ast
  new_thing = ast.literal_eval(your_unicode_string)

  and new_thing will BE whatever your unicode string looked like.  in my case, it looked like a string, and after ast.literal_eval, it IS a string.

Simple HTML5 datetime input:  http://www.html5tutorial.info/html5-date.php

Bootstrap Forms example:  http://getbootstrap.com/css/#forms

Google Maps "Places Search box" to choose destination
    https://developers.google.com/places/web-service/autocomplete?csw=1#requirements

Google Maps Autofill
  Enabled "Google Places API Web Service"

Google Maps Map
  Signed up for Google Maps JavaScript API
  Saved key to secrets.sh
  Must run "source secrets.sh" in bash to load up the key to environment variable
  Key is then available in server.py using "import os" and setting value to varible, which I pass to the app_route that needs to access map API,
  and then use jinja to stick that variable in the path that is passed:
        <script
    src="https://maps.googleapis.com/maps/api/js?key={{ map_api_key }}&callback=initMap">
        </script>

Trouble with "AssertionError: Popped wrong request context.  (None instead of <RequestContext 'http://localhost/' [GET] of server>)"
  Did not fix it:  adding to setup - app.config['PRESERVE_CONTEXT_ON_EXCEPTION'] = False
  FIXED:  had the POST within the context of "with c.session_transaction() as sess:",
    which was not a valid context...  it let the post work (the login happened and
    the redirect happened!) but when it poped out to the rest of the test, it
    had the wrong context and threw that error.

Trouble with sqlalchemy/jinja:
              {% if user.invites.status == 'act' %} 
  UndefinedError: 'sqlalchemy.orm.collections.InstrumentedList object' has no attribute 'status'

Passing data from html to javascript.
  Way I didn't do it that may work better than the way i did it:
    <!-- makes data-login attribute, which can be read in JS as $('#map').data('login')-->
    <script type="text/javascript">
      $('#map').data( 'login', {{ session.login }})

Password hashing:  https://flask-bcrypt.readthedocs.io/en/latest/

Fancy Map styles in Google Maps API
  https://snazzymaps.com/

Fancy Google Maps marker customization:
  https://pepsized.com/customize-your-google-map-markers/

Fancy IF in javascript:
      strokeColor: (login == user_id) ? '#393' : symbolcolors[i]

      where "i" was the i in a for loop... but it could be something else

Things that were not working for AJAX call to get invitation waypoints data:
        
        Attempt #1:
        success: function(data) {
          // do stuf with the query data that is returned
            alert="ajax call did something!"
          },
          error: function(xhr) {
          alert="there was an error retrieving waypoint data!"
          }
        });

        function DecideWhichUser(user_id, invite_id, queries) {
          
        }

        Attempt #2 (I think the $.post stuff is right, but not sure how to actually
            use this)  ARG!:
        function() {
          $.post('/map-data.json',
          {
            invite_id = {{ invite_id }}
          },
          function(data, status){
            alert("Data: " + data + "\nStatus: " + status);
          });
        }

        Ideas to try:
            $( window ).on( "load", function() { ... })
            $( document ).ready(function() {}

Color Picker:  https://www.w3schools.com/colors/colors_picker.asp

How to stop the animation when it reaches the end of the line?
    http://stackoverflow.com/questions/16338774/show-a-moving-marker-on-the-map




Things that I did to get Path formatted correctly:
  NOTE:  to draw the polyline of route:
  path = needs to be formated as: 
    [{'lat': 37.748915, 'lng': -122.4181515}, {'lat': 37.7482293, 'lng': -122.4182139}...] 


// what it looks like when you enter it manually (and it works):
 //  path: [{'lat': 37.748915, 'lng': -122.4181515},
 // {'lat': 37.7482293, 'lng': -122.4182139},
 // {'lat': 37.7496136, 'lng': -122.4041771}],

    in server.py:
        user1path = []

        user1query = db.session.query(Waypoint.waypoint_lat,
                                      Waypoint.waypoint_long).filter(Waypoint.user_id == 1,
                                                                    Waypoint.invite_id == 1).all()

        for waypoint in user1query:
            waypoint_dict = {}
            waypoint_dict['lat'] = float(waypoint[0])
            waypoint_dict['lng'] = float(waypoint[1])
            user1path.append(waypoint_dict)
    but when user1path was interpreted by jinja (in {{ user1path }} ) it was putting
        the symbols for the single quotes around lat & lng instead of literal single quotes

    so tried in the HTML:
        tried this:
           // but it was putting code instead of single quote round 'lat'
          path: {{ user1path }},

        tried this:
         path: [
          {% for waypoint in user1query: %}
            {'lat': waypoint[0], 'lng': waypoint[1]},
          {% endfor %}
          ],

***Fixed** I was so close.  Fixed by putting jinja {{}} around wayoint[0] and waypoint[1]
      POSSIBLE ALTERNATIVE if this gets funky (since jinja within Javascript can
        go south:  create a separate route that returns json with just the route
        data and pass that back to the javascript as a separate thing.


Mapbox
    driving directions
        example: https://www.mapbox.com/mapbox-gl-js/example/mapbox-gl-directions/

        Maybe v4 returns the actual data?
        https://www.mapbox.com/api-documentation/pages/directions-v4.html

    point animation
        example: https://www.mapbox.com/mapbox-gl-js/example/animate-point-along-route/

    turf
        https://www.mapbox.com/help/analysis-with-turf/


        line-distance:
            example: https://www.mapbox.com/mapbox-gl-js/example/measure/
            documentation:  https://github.com/turf-junkyard/turf-line-distance

        turf.along:
            docs:  http://turfjs.org/docs/ and search for "along"

            turf.along looks like it has feature "Center" that I can use in future release to calculate the center point between User1 and User2... and then use Yelp to find a restaurant near that center point...



working with routes data from mapbox
    bash command line:
         curl "https://api.mapbox.com/directions/v5/mapbox/driving/-122.4114, 37.7887;-122.4683, 37.7181?steps=true&alternatives=true&access_token=sk.eyJ1IjoiaGVsbG9hcmllbCIsImEiOiJjajJhbTF2MmEwMDhnMzNvZzhndDZkOG5oIn0.M8t-MQ_OSc_hCGwSDkyjnQ" > directions.json
         (found this here:  https://www.mapbox.com/api-documentation/#directions)

    interactive python:
        f=open('directions.json')
        data = f.read()

        import json
        data = json.loads(data)

        new_data = data['routes'][0]['legs'][0]['steps']

        directions = []

        for step in new_data:
            directions.append(step['intersections'][0]['location'])


    Polyline
        installed polyline:   npm install @mapbox/polyline
        but still did not get polyline to work.

